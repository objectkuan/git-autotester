@include <kernel-model/ERR.aspect>

before: file("$this")
{
#include <linux/kernel.h>
#include <linux/module.h>

#include <linux/usb.h>
#include <linux/netdevice.h>

// Provide model function prototypes before their usage.
int ldv_usb_register(void);
int ldv_register_netdev(void);
}

// Non-deterministically change state after call to usb_register
around:	define(usb_register(driver))
{
	ldv_usb_register();
}

// Non-deterministically change state after call to register_netdev
after:	call(int register_netdev(..))
{
	return ldv_register_netdev();
}


after: file ("$this")
{
#include <linux/kernel.h>
#include <linux/module.h>

#include <linux/usb.h>
#include <linux/netdevice.h>

#include <verifier/rcv.h>		// For LDV auxiliary routines.
#include <kernel-model/ERR.inc>

// There are 3 possible model states
enum
{
	LDV_PROBE_ZERO_STATE = 0,	// No error occured
	LDV_PROBE_ERROR = 1,		// Error occured. probe() should return error an code (or at least not zero)
};

/* LDV_COMMENT_OTHER The model automaton state (one of thee possible ones). */
int ldv_probe_state = LDV_PROBE_ZERO_STATE;

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_usb_register') Non-deterministically change state after call to usb_register. */
int ldv_usb_register(void)
{
	int nondet;

	/* LDV_COMMENT_OTHER Nondeterministically report an error. */
	if (nondet < 0) {
		/* LDV_COMMENT_CHANGE_STATE Error occured. */
		ldv_probe_state = LDV_PROBE_ERROR;
		/* LDV_COMMENT_RETURN Return an error. */
		return nondet;
	} else if (nondet >= 0) {
		/* LDV_COMMENT_RETURN Assume no error occured. */
		return 0;
	}
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='register_netdev') Non-deterministically change state after call to register_netdev. */
int ldv_register_netdev(void)
{
	int nondet;

	/* LDV_COMMENT_OTHER Nondeterministically report an error. */
	if (nondet < 0) {
		/* LDV_COMMENT_CHANGE_STATE Error occured. */
		ldv_probe_state = LDV_PROBE_ERROR;
		/* LDV_COMMENT_RETURN Return an error. */
		return nondet;
	} else if (nondet >= 0) {
		/* LDV_COMMENT_RETURN Assume no error occured. */
		return 0;
	}
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_return_value_probe') Check the error code was properly propagated in probe . */
void ldv_check_return_value_probe(int retval)
{
	if (ldv_probe_state == LDV_PROBE_ERROR)
		ldv_assert(retval != 0);
}

}
