--- kint-org/src/IntRewrite.cc	2013-11-16 18:38:40.347782729 +0800
+++ kint/src/IntRewrite.cc	2013-11-12 21:56:48.117514863 +0800
@@ -16,6 +16,9 @@
 #include <llvm/Support/GetElementPtrTypeIterator.h>
 #include <llvm/Support/InstIterator.h>
 #include <llvm/Transforms/Utils/BasicBlockUtils.h>
+//add by wh
+#include <llvm/Support/Debug.h>
+#include <sstream>
 
 using namespace llvm;
 
@@ -97,6 +100,64 @@
 	return CI;
 }
 
+///////////////////wh
+void toString(Instruction *I, std::string &Str) {
+	llvm::raw_string_ostream OS(Str);
+	I->getOperand(0)->getType()->print(OS);;
+}
+
+void toString2(Value *V, std::string &Str) {
+	llvm::raw_string_ostream OS(Str);
+	V->getType()->print(OS);
+}
+	
+void ExtendAnno(StringRef &Anno, Instruction *I) {
+	std::string m_Anno = Anno.str();
+	std::string type;
+	switch(I->getOpcode()) {
+	  default: break;
+		case Instruction::Add:
+		case Instruction::Sub:
+		case Instruction::Mul:			
+		case Instruction::SDiv:
+		case Instruction::UDiv:	
+			m_Anno.append(".");
+			toString(I, type);
+			m_Anno.append(type);
+			Anno=StringRef(m_Anno);
+			break;
+		case Instruction::Shl:
+		case Instruction::LShr:
+		case Instruction::AShr:
+			m_Anno.append(".");
+			toString(I, type);
+			m_Anno.append(type);
+			Anno=StringRef(m_Anno);
+			break;
+		case Instruction::GetElementPtr:
+			gep_type_iterator i = gep_type_begin(I), e = gep_type_end(I);
+			for (; i != e; ++i) {//I->getPrevNode()->getPrevNode()->dump();
+				ArrayType *T = dyn_cast<ArrayType>(*i);
+				if (!T)
+					continue;
+				uint64_t n = T->getNumElements();
+				if (n <= 1)
+					n = INT_MAX;
+				m_Anno.append(".m");
+				Value *Idx = i.getOperand();
+				toString2(Idx, type);
+				std::ostringstream size;
+				size<<n;
+				m_Anno.append(size.str());
+				m_Anno.append(".");
+				m_Anno.append(type);
+			}			
+			Anno=StringRef(m_Anno);
+			break;
+	}
+}
+///////////////////////////////
+
 void insertIntSat(Value *V, Instruction *I, StringRef Bug) {
 	insertIntSat(V, I, I, Bug, I->getDebugLoc());
 }
@@ -112,12 +173,117 @@
 	LI = &getAnalysis<LoopInfo>();
 	TD = getAnalysisIfAvailable<DataLayout>();
 	bool Changed = false;
+	//add by wh
+	bool findSatICmp = false;
+	
 	for (inst_iterator i = inst_begin(F), e = inst_end(F); i != e; ++i) {
 		Instruction *I = &*i;
 		if (!isa<BinaryOperator>(I) && !isa<GetElementPtrInst>(I))
 			continue;
 		Builder->SetInsertPoint(I);
-		switch (I->getOpcode()) {
+		
+		//////////////////////////////////////////////wh
+		if(isa<BinaryOperator>(I)){ 
+		  //llvm::dbgs()<<I->getOpcodeName()<<'\n';
+		  llvm::BasicBlock *BB = I->getParent();
+		  //llvm::dbgs()<<"BB = "<<BB->getName()<<'\n';
+		  if(BB){
+		    pred_iterator PI = pred_begin(BB), E = pred_end(BB);
+		    if(PI != E){//BB has predecessors
+		      llvm::BasicBlock *Pred;
+		      for (;PI != E; ++PI) {
+			Pred = *PI;
+			if(Pred){
+			 // llvm::dbgs()<<Pred->getName()<<" ";
+			  for(llvm::ilist_iterator<llvm::Instruction> j = Pred->begin(), f = Pred->end();j != f; ++j) {
+			    Instruction *J = &*j;
+			    if(isa<ICmpInst>(J)){
+			      //check satisfiable by comparing operands
+			      if(I->getOperand(0)==J->getOperand(0) ||
+				I->getOperand(0)==J->getOperand(1) ||
+				I->getOperand(1)==J->getOperand(0) ||
+				I->getOperand(1)==J->getOperand(1) ){
+				//llvm::dbgs()<<"operand 0 is same.\n";
+				//find satisfiable icmp instruction in this Pred
+				//don't need to check other instructions
+				findSatICmp = true;
+				break;
+			      }
+			    }
+			  }
+			}
+			if(findSatICmp)
+			  break;
+		      }
+		     // llvm::dbgs()<<"\n";
+		    }  
+		    //no satisfiable icmp instruction in all predecessors
+		    //or no predecessors
+		    if(!findSatICmp){
+		      llvm::ilist_iterator<llvm::Instruction> m = BB->begin();
+		      Instruction *M = &*m;
+		      for(;M != I; ++m, M = &*m) {
+			if(isa<ICmpInst>(M)){
+			  if(I->getOperand(0)==M->getOperand(0) ||
+			    I->getOperand(0)==M->getOperand(1) ||
+			    I->getOperand(1)==M->getOperand(0) ||
+			    I->getOperand(1)==M->getOperand(1) ) {
+			    //find satisfiable icmp instruction in previous instructions
+			    findSatICmp = true;
+			    break;
+			  }
+			}
+		      }
+		    }	
+		  }		  	  
+		}
+		else if(isa<GetElementPtrInst>(I)){
+		  if(findSatICmp)
+		    llvm::dbgs()<<"flag findSatICmp error!!!\n";
+		  findSatICmp = true;
+		}
+		
+		if(findSatICmp){
+		  switch (I->getOpcode()) {
+		  default:
+			  findSatICmp = false;
+			  continue;
+		  case Instruction::Add:
+			  Changed |= insertOverflowCheck(I,
+				  Intrinsic::sadd_with_overflow,
+				  Intrinsic::uadd_with_overflow);
+			  break;
+		  case Instruction::Sub:
+			  Changed |= insertOverflowCheck(I,
+				  Intrinsic::ssub_with_overflow,
+				  Intrinsic::usub_with_overflow);
+			  break;
+		  case Instruction::Mul:
+			  Changed |= insertOverflowCheck(I,
+				  Intrinsic::smul_with_overflow,
+				  Intrinsic::umul_with_overflow);
+			  break;
+		  case Instruction::SDiv:
+		  case Instruction::UDiv:
+			  Changed |= insertDivCheck(I);
+			  break;
+		  // Div by zero is not rewitten here, but done in a separate
+		  // pass before -overflow-idiom, which runs before this pass
+		  // and rewrites divisions as multiplications.
+		  case Instruction::Shl:
+		  case Instruction::LShr:
+		  case Instruction::AShr:
+			  Changed |= insertShiftCheck(I);
+			  break;
+		  case Instruction::GetElementPtr:
+			  Changed |= insertArrayCheck(I);
+			  break;
+		  }
+		  //reset findSatICmp flag
+		  findSatICmp = false;
+		}
+		
+/*		switch (I->getOpcode()) {
 		default: continue;
 		case Instruction::Add:
 			Changed |= insertOverflowCheck(I,
@@ -150,7 +316,7 @@
 			Changed |= insertArrayCheck(I);
 			break;
 		}
-	}
+*/	}
 	return Changed;
 }
 
@@ -189,6 +355,11 @@
 	Value *V = Builder->CreateExtractValue(CI, 1);
 	// llvm.[s|u][add|sub|mul].with.overflow.*
 	StringRef Anno = F->getName().substr(5, 4);
+	
+	////////////////wh
+	ExtendAnno(Anno, I);
+	////////////////
+	
 	if (hasNSW) {
 		// Insert the check eagerly for signed integer overflow,
 		// if -fwrapv is not given.
@@ -300,6 +471,12 @@
 	}
 	if (!V)
 		return false;
+	
+	////////////wh
+	StringRef Anno("array");
+	ExtendAnno(Anno, I);
+	////////////	
+	
 	insertIntSat(V, I, "array");
 	return true;
 }
