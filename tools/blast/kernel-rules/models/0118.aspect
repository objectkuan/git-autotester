before: file ("$this")
{
#include <linux/kernel.h>
#include <linux/spinlock.h>

extern void ldv_read_lock_irqsave(rwlock_t *lock);
extern void ldv_read_unlock_irqrestore(rwlock_t *lock);

extern void ldv_write_lock_irqsave(rwlock_t *lock);
extern void ldv_write_unlock_irqrestore(rwlock_t *lock);

extern void ldv_read_lock(rwlock_t *lock);
extern void ldv_read_unlock(rwlock_t *lock);

extern void ldv_write_lock(rwlock_t *lock);
extern void ldv_write_unlock(rwlock_t *lock);

extern int ldv_read_trylock(rwlock_t *lock);
extern int ldv_write_trylock(rwlock_t *lock);

extern void ldv_read_lock_irq(rwlock_t *lock);
extern void ldv_read_unlock_irq(rwlock_t *lock);

extern void ldv_write_lock_irq(rwlock_t *lock);
extern void ldv_write_unlock_irq(rwlock_t *lock);

extern void ldv_read_lock_bh(rwlock_t *lock);
extern void ldv_read_unlock_bh(rwlock_t *lock);

extern void ldv_write_lock_bh(rwlock_t *lock);
extern void ldv_write_unlock_bh(rwlock_t *lock);
}

around: define(read_lock_irqsave(lock, flags)) {
  ldv_read_lock_irqsave(lock)
}
around: define(read_unlock_irqrestore(lock, flags)) {
  ldv_read_unlock_irqrestore(lock)
}

around: define(write_lock_irqsave(lock, flags)) {
  ldv_write_lock_irqsave(lock)
}
around: define(write_unlock_irqrestore(lock, flags)) {
  ldv_write_unlock_irqrestore(lock)
}

around: define(read_lock(lock)) {
  ldv_read_lock(lock)
}
around: define(read_unlock(lock)) {
  ldv_read_unlock(lock)
}

around: define(write_lock(lock)) {
  ldv_write_lock(lock)
}
around: define(write_unlock(lock)) {
  ldv_write_unlock(lock)
}

around: define(read_trylock(lock)) {
  ldv_read_trylock(lock)
}
around: define(write_trylock(lock)) {
  ldv_write_trylock(lock)
}

around: define(read_lock_irq(lock)) {
  ldv_read_lock_irq(lock)
}
around: define(read_unlock_irq(lock)) {
  ldv_read_unlock_irq(lock)
}

around: define(write_lock_irq(lock)) {
  ldv_write_lock_irq(lock)
}
around: define(write_unlock_irq(lock)) {
  ldv_write_unlock_irq(lock)
}

around: define(read_lock_bh(lock)) {
  ldv_read_lock_bh(lock)
}
around: define(read_unlock_bh(lock)) {
  ldv_read_unlock_bh(lock)
}

around: define(write_lock_bh(lock)) {
  ldv_write_lock_bh(lock)
}
around: define(write_unlock_bh(lock)) {
  ldv_write_unlock_bh(lock)
}


after: file ("$this")
{

#include <linux/kernel.h>
#include <linux/spinlock.h>

#include <verifier/rcv.h>

/* LDV_COMMENT_MODEL_STATE Read lock state = free*/
int ldv_rlock = 1;
/* LDV_COMMENT_MODEL_STATE Write lock state = free*/
int ldv_wlock = 1;

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_lock_irqsave') Acquires the read lock*/
void ldv_read_lock_irqsave(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
  /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
  ldv_rlock += 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_unlock_irqrestore') Releases the read lock and checks that read lock was acquired before*/
void ldv_read_unlock_irqrestore(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Lock should be in a locked state*/
  ldv_assert(ldv_rlock > 1);
  /* LDV_COMMENT_CHANGE_STATE Goto free state*/
  ldv_rlock -= 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_lock_irqsave') Acquires the write lock and checks for double write lock*/
void ldv_write_lock_irqsave(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
  /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
  ldv_wlock = 2;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_unlock_irqrestore') Releases the write lock and checks that write lock was acquired before*/
void ldv_write_unlock_irqrestore(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Lock should be in a locked state*/
  ldv_assert(ldv_wlock != 1);
  /* LDV_COMMENT_CHANGE_STATE Goto free state*/
  ldv_wlock = 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_lock') Acquires the read lock*/
void ldv_read_lock(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
  /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
  ldv_rlock += 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_unlock') Releases the read lock and checks that read lock was acquired before*/
void ldv_read_unlock(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Read lock should be in a locked state*/
  ldv_assert(ldv_rlock > 1);
  /* LDV_COMMENT_CHANGE_STATE Goto free state*/
  ldv_rlock -= 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_lock') Acquires the write lock and checks for double write lock*/
void ldv_write_lock(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
  /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
  ldv_wlock = 2;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_unlock') Releases the write lock and checks that write lock was acquired before*/
void ldv_write_unlock(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a locked state*/
  ldv_assert(ldv_wlock != 1);
  /* LDV_COMMENT_CHANGE_STATE Goto free state*/
  ldv_wlock = 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_trylock') Tries to acquire the read lock and returns one if successful*/
int ldv_read_trylock(rwlock_t *lock) {
  /* LDV_COMMENT_OTHER Construct the nondetermined result*/
  if(ldv_wlock == 1 && ldv_undef_int()) {
    /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
    ldv_rlock += 1;
    /* LDV_COMMENT_RETURN The read lock is acquired*/
    return 1;
  } else {
    /* LDV_COMMENT_RETURN The read lock is not acquired*/
    return 0;
  }
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_trylock') Tries to acquire the write lock and returns one if successful*/
int ldv_write_trylock(rwlock_t *lock) {
  /* LDV_COMMENT_OTHER Construct the nondetermined result*/
  if(ldv_wlock == 1 && ldv_undef_int()) {
    /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
    ldv_wlock = 2;
    /* LDV_COMMENT_RETURN The write lock is acquired*/
    return 1;
  } else {
    /* LDV_COMMENT_RETURN The write lock is not acquired*/
    return 0;
  }
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_lock_irq') Acquires the read lock*/
void ldv_read_lock_irq(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
  /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
  ldv_rlock += 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_unlock_irq') Releases the read lock and checks that read lock was acquired before*/
void ldv_read_unlock_irq(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Read lock should be in a locked state*/
  ldv_assert(ldv_rlock > 1);
  /* LDV_COMMENT_CHANGE_STATE Goto free state*/
  ldv_rlock -= 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_lock_irq') Acquires the write lock and checks for double write lock*/
void ldv_write_lock_irq(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
  /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
  ldv_wlock = 2;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_unlock_irq') Releases the write lock and checks that write lock was acquired before*/
void ldv_write_unlock_irq(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a locked state*/
  ldv_assert(ldv_wlock != 1);
  /* LDV_COMMENT_CHANGE_STATE Goto free state*/
  ldv_wlock = 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_lock_bh') Acquires the read lock*/
void ldv_read_lock_bh(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
  /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
  ldv_rlock += 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_read_unlock_bh') Releases the read lock and checks that read lock was acquired before*/
void ldv_read_unlock_bh(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Read lock should be in a locked state*/
  ldv_assert(ldv_rlock > 1);
  /* LDV_COMMENT_CHANGE_STATE Goto free state*/
  ldv_rlock -= 1;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_lock_bh') Acquires the write lock and checks for double write lock*/
void ldv_write_lock_bh(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
  /* LDV_COMMENT_CHANGE_STATE Goto locked state*/
  ldv_wlock = 2;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_write_unlock_bh') Releases the write lock and checks that write lock was acquired before*/
void ldv_write_unlock_bh(rwlock_t *lock) {
  /* LDV_COMMENT_ASSERT Write lock should be in a locked state*/
  ldv_assert(ldv_wlock != 1);
  /* LDV_COMMENT_CHANGE_STATE Goto free state*/
  ldv_wlock = 1;
}


/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_final_state') Checks that all locks were released*/
void ldv_check_final_state(void) {
  /* LDV_COMMENT_ASSERT Read lock should be in a free state*/
  ldv_assert(ldv_rlock == 1);
  /* LDV_COMMENT_ASSERT Write lock should be in a free state*/
  ldv_assert(ldv_wlock == 1);
}

}
