@include <kernel-model/alloc.aspect>

before: file ("$this")
{
extern void ldv_spin_lock(void);
extern void ldv_spin_unlock(void);
extern int ldv_spin_trylock(void);

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/slab.h>

extern void *ldv_undefined_pointer(void);
extern void ldv_check_alloc_flags(gfp_t flags);
extern void ldv_check_alloc_nonatomic(void);
/* Returns an arbitrary page in addition to checking flags */
extern struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags);
}

before: ALLOC
{
  ldv_check_alloc_flags(flags);
}

around: ALLOC_AROUND
{
  ldv_check_alloc_flags(flags);
}

before: ALLOC_WITHOUT
{
  ldv_check_alloc_nonatomic();
}

around: alloc_pages
{
  ldv_check_alloc_flags_and_return_some_page(gfp_mask);
}

around: alloc_page_vma
{
  ldv_check_alloc_flags_and_return_some_page(gfp_mask);
}

before: execution(static inline void spin_lock(..))
     || execution(static inline void spin_lock_bh(..))
     || execution(static inline void spin_lock_irq(..))
{
  ldv_spin_lock();
}

around: define(spin_lock_irqsave(lock, flags))
{
  ldv_spin_lock()
}

around: define(spin_lock_nested(lock, subclass))
{
  ldv_spin_lock()
}

around: define(spin_lock_nest_lock(lock, nest_lock))
{
  ldv_spin_lock()
}

around: define(spin_lock_irqsave_nested(lock, flags, subclass))
{
  ldv_spin_lock()
}

/* Unfortunately aspectator doesn't process this correctly.
around: define(spin_lock_irqsave(lock, flags))
     || define(spin_lock_nested(lock, subclass))
     || define(spin_lock_nest_lock(lock, nest_lock))
     || define(spin_lock_irqsave_nested(lock, flags, subclass))
{
ldv_spin_lock()
}
*/

before: execution(static inline void spin_unlock(..))
     || execution(static inline void spin_unlock_bh(..))
     || execution(static inline void spin_unlock_irq(..))
     || execution(static inline void spin_unlock_irqrestore(..))
     || define(spin_unlock_irqrestore(lock,flags))
{
  ldv_spin_unlock();
}

/* Call model function after original functions to ensure that non 0 will be
 * returned on successfull spin locking and v.v. Also use direct return
 * statement for this purpose. */
after: execution(static inline int spin_trylock(..))
     || execution(static inline int spin_trylock_bh(..))
     || execution(static inline int spin_trylock_irq(..))
{
  return ldv_spin_trylock();
}

around: define(spin_trylock_irqsave(lock, flags))
{
ldv_spin_trylock()
}

around: define(atomic_dec_and_lock(atomic, lock))
{
ldv_spin_trylock()
}

/* This is required for "old" kernels like linux-2.6.31.6.
around: define(spin_lock(lock))
{
ldv_spin_lock()
}
around: define(spin_unlock(lock))
{
ldv_spin_unlock()
}
*/


after: file ("$this")
{

/* Here is the definition of CHECK_WAIT_FLAGS(flags) macro. */
#include "include/gfp.h"

#include <verifier/rcv.h>


#define LDV_ZERO_STATE 0


/* There are 2 possible states of spin lock. */
enum {
  LDV_SPIN_UNLOCKED = LDV_ZERO_STATE, /* Spin isn't locked. */
  LDV_SPIN_LOCKED                     /* Spin is locked. */
};


/* Spin isn't locked at the beginning. */
int ldv_spin = LDV_SPIN_UNLOCKED;


/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_alloc_flags') Check that a memory allocating function was called with a correct value of flags in spin locking. */
void ldv_check_alloc_flags(gfp_t flags)
{
  /* LDV_COMMENT_ASSERT If spin is locked (ldv_spin != LDV_SPIN_UNLOCKED) then a memory allocating function should be called with __GFP_WAIT flag unset (GFP_ATOMIC or GFP_NOWAIT). */
  ldv_assert(ldv_spin == LDV_SPIN_UNLOCKED || CHECK_WAIT_FLAGS(flags));
}

extern struct page *ldv_some_page(void);

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_alloc_flags_and_return_some_page') Check that a memory allocating function was called with a correct value of flags in spin locking. */
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags)
{
  /* LDV_COMMENT_ASSERT If spin is locked (ldv_spin != LDV_SPIN_UNLOCKED) then a memory allocating function should be called with __GFP_WAIT flag unset (GFP_ATOMIC or GFP_NOWAIT). */
  ldv_assert(ldv_spin == LDV_SPIN_UNLOCKED || CHECK_WAIT_FLAGS(flags));
  /* LDV_COMMENT_RETURN Return a page pointer (maybe NULL). */
  return ldv_some_page();
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_alloc_nonatomic') Check that a memory allocating function was not calledin spin locking. */
void ldv_check_alloc_nonatomic(void)
{
  /* LDV_COMMENT_ASSERT If spin is locked (ldv_spin != LDV_SPIN_UNLOCKED) then the memory allocating function should be called, because it implicitly uses GFP_KERNEL flag. */
  ldv_assert(ldv_spin == LDV_SPIN_UNLOCKED);
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_spin_lock') Lock spin. */
void ldv_spin_lock(void)
{
  /* LDV_COMMENT_CHANGE_STATE Lock spin. */
  ldv_spin = LDV_SPIN_LOCKED;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_spin_unlock') Unlock spin. */
void ldv_spin_unlock(void)
{
  /* LDV_COMMENT_CHANGE_STATE Unlock spin. */
  ldv_spin = LDV_SPIN_UNLOCKED;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_spin_trylock') Try to lock spin. It should return 0 if spin wasn't locked. */
int ldv_spin_trylock(void)
{
  int is_lock;

  /* LDV_COMMENT_OTHER Do this to make nondetermined choice. */
  is_lock = ldv_undef_int();

  if (is_lock)
  {
    /* LDV_COMMENT_RETURN Don't lock spin and return 0. */
    return 0;
  }
  else
  {
    /* LDV_COMMENT_CHANGE_STATE Lock spin. */
    ldv_spin = LDV_SPIN_LOCKED;
    /* LDV_COMMENT_RETURN Return 1 since spin was locked. */
    return 1;
  }
}

}