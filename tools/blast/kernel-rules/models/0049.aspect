before: file ("$this")
{
extern unsigned long ldv_spin_lock_irqsave(void);
extern void ldv_spin_unlock_irqrestore(void);
extern void ldv_spin_lock(void);
extern void ldv_spin_unlock(void);
extern void ldv_might_sleep(void);
}

around: define(spin_lock_irqsave(lock, flags))
{
ldv_spin_lock_irqsave()
}

around: define(spin_unlock_irqrestore(lock, flags))
{
ldv_spin_unlock_irqrestore()
}

around: define(spin_lock(lock))
{
ldv_spin_lock()
}

around: define(spin_unlock(lock))
{
ldv_spin_unlock()
}

before: call(int kref_put(..))
{
  ldv_might_sleep();
}


after: file ("$this")
{

#include <verifier/rcv.h>

int ldv_lock = 1;

unsigned long ldv_spin_lock_irqsave(void)
{
  ldv_assert(ldv_lock == 1);
  ldv_lock = 2;
  return ldv_undef_ulong();
}

void ldv_spin_unlock_irqrestore(void)
{
  ldv_assert(ldv_lock != 1);
  ldv_lock = 1;
}

void ldv_spin_lock(void)
{
  ldv_assert(ldv_lock == 1);
  ldv_lock = 2;
}

void ldv_spin_unlock(void)
{
  ldv_assert(ldv_lock != 1);
  ldv_lock = 1;
}

void ldv_might_sleep(void)
{
  /* Might sleep may be called just outside spinlock. */
  ldv_assert(ldv_lock == 1);
}


void ldv_check_final_state(void)
{
  ldv_assert(ldv_lock == 1);
}

}
